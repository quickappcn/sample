<template>
  <div class="doc-page">
    <div class="page-title-wrap">
      <text class="page-title">{{componentName}}</text>
    </div>

    <div class="video justify-content-center">
      <stack id="stackDemo01" class="flex-column video-container">
        <video class="flex-1 {{objectFitClass}}" poster="./video_poster_small.png"
               autoplay="false" onprepared="preparedfn" onstart="startfn" onpause="pausefn" onfinish="finishfn"
               onerror="errorfn" onseeking="seekingfn" onseeked="seekedfn" ontimeupdate="timeupdatefn" id="video"
               src="https://swsdl.vivo.com.cn/appstore/developer/uploadfile/20180323/20180323183010837.mp4"
               controls="{{showControls}}" muted="{{muted}}" titlebar="{{titlebar}}" title="快应用展示视频"></video>
        <image show="{{showmask}}" src="./video_poster_small.png"></image>
        <div class="mask align-item-center justify-content-center flex-column" show="{{showmask}}">
          <image show="{{showicon}}" src="./start.png" class="start-icon" onclick="startVideo"></image>
          <div show="{{!showicon}}" class="tip flex-column align-item-center">
            <text class="xui-color-1">正在使用移动网络，可能产生额外的流量费用</text>
            <text class="continue" onclick="startVideo({usenet: true})">继续</text>
          </div>
        </div>
      </stack>
    </div>
    <div class="item-container " style="flex-direction:column">
      <div class="item-content">
        <text class="item-content_title">是否显示播放控件</text>
        <switch class="switch" checked="true" onchange="switchShowControls"></switch>
      </div>
      <div class="item-content">
        <text class="item-content_title">全屏播放时是否显示标题栏</text>
        <switch class="switch" checked="true" onchange="onTitleBarShowed"></switch>
      </div>
      <div class="item-content">
        <text class="item-content_title">是否静音</text>
        <switch class="switch" checked="false" onchange="onMutedSwitched"></switch>
      </div>
      <input type="button" onclick="setFullScreenInPortrait" value="JS设置竖屏全屏播放"></input>
      <input type="button" onclick="setFullScreenInLandscape" value="JS设置横屏全屏播放"></input>
    </div>
    <div class="item-container">
      <div class="item-content">
        <text class="item-content_title">选择组件 Object-fit 样式</text>
        <select class="select" onchange="changeOption">
          <option class="option" for={{objectFitValues}} value="{{$item}}">{{$item}}</option>
        </select>
      </div>
    </div>

  </div>
</template>

<script>
  import prompt from '@system.prompt'
  import network from '@system.network'

  export default {
    private: {
      componentName: 'video',
      showmask: true,
      showicon: true,
      ignorenet: false,
      showControls: true,
      muted: false,
      titlebar: true,
      objectFitValues: [
        "contain", "cover", "fill", "none", "scale-down"
      ],
      objectFitClass: ''
    },
    onInit() {
      this.$page.setTitleBar({ text: 'Video' })
    },
    startVideo(e) {
      if (e.usenet) {
        // 非wifi情况下继续播放
        this.ignorenet = true
      }
      this.networkstatus('video')
    },
    networkstatus() {
      network.subscribe({
        callback: function (data) {
          if (data.type === 'wifi' || this.ignorenet) {
            this.$element('video').start()
            this.showmask = false
          } else {
            this.showmask = true
            this.$element('video').pause()
            this.showicon = false
          }
        }.bind(this)
      })
    },
    switchShowControls(e) {
      this.showControls = e.checked
    },
    onMutedSwitched(e) {
      this.muted = e.checked
    },
    onTitleBarShowed(e){
      this.titlebar=e.checked;
    },
    changeOption(e) {
      this.objectFitClass = e.newValue
      prompt.showToast({
        message: `object-fit切换为 ${e.newValue}`
      })
    },
    setFullScreenInPortrait() {
      this.$element('video').requestFullscreen({screenOrientation: 'portrait'})
    },
    setFullScreenInLandscape() {
      this.$element('video').requestFullscreen({screenOrientation: 'landscape'})
    }
  }
</script>

<style>
  @import '../../../common/css/common.css';
  @import '../../../common/css/index.css';

  .video-container {
    width: 750px;
    height: 350px;
  }

  .video {
    width: 750px;
    height: 400px;
  }

  .mask {
    flex: 1;
    background-color: rgba(0, 0, 0, 0.1);
  }

  .start-icon {
    height: 100px;
    width: 100px;
    object-fit: cover;
  }

  .tip .continue {
    padding: 15px 30px;
    border: 1px solid #ffffff;
    margin-top: 30px;
    margin-bottom: 10px;
    color: #ffffff;
    border-radius: 30px;
  }

  .item-container {
    margin-top: 20px;
  }

  .select {
    border: 1px solid #333333;
    border-radius: 5px;
    margin-top:12px;
  }

  .option {
    padding-top: 20px;
    padding-bottom: 20px;
    padding-left: 20px;
  }

  .contain {
    object-fit: contain;
  }

  .cover {
    object-fit: cover;
  }

  .fill {
    object-fit: fill;
  }

  .none {
    object-fit: none;
  }

  .scale-down {
    object-fit: scale-down;
  }

</style>
