<template>
  <div class="doc-page">
    <div class="page-title-wrap">
      <text class="page-title">{{componentName}}</text>
    </div>
    <div class="content">
      <text>canvas绘制时钟</text>
      <canvas id="canvas1"></canvas>
      <image show="{{imageUrl}}" src="{{imageUrl}}"></image>
      <input type="button" class="btn" value="保存图片" onclick="savePic"></input>
    </div>
    <div class="content">
      <text>canvas绘制图形</text>
      <canvas id="canvas2"></canvas>
    </div>
    <div class="content">
      <text>canvas绘制图片</text>
      <canvas id="canvas3"></canvas>
    </div>
    <div class="content">
      <text>canvas绘制元素</text>
      <image id="image" src="/common/logo.png"></image>
      <canvas id="canvas4"></canvas>
    </div>
    <div class="content">
      <text>canvas像素操作</text>
      <canvas id="canvas5"></canvas>
    </div>
    <div class="content">
      <text class=glo-type>{{globalCompositeOperation}}</text>
      <canvas id="canvas6"></canvas>
      <input class="btn" value="切换合成方式" type="button" onclick="changeGlobalCompositeOperation"></input>
    </div>
    <div class="content">
      <text>canvas绘制虚线</text>
      <canvas id="canvas7"></canvas>
    </div>
  </div>
</template>

<script>
  import { drawClock, drawLogo, drawGradientLogo, grayFilter, drawRectByGloComOperation } from './canvas'
  import prompt from '@system.prompt'

  export default {
    private: {
      componentName: 'canvas',
      globalCompositeOperation: 'source-over',
      imageUrl: ''
    },
    onInit () {
      this.$page.setTitleBar({ text: 'Canvas' })
    },
    onShow () {
      this.drawCanvas1()
      this.drawCanvas2()
      this.drawCanvas3()
      this.drawCanvas4()
      this.drawCanvas5()
      this.drawCanvas6()
      this.drawCanvas7()
    },
    drawCanvas1 () {
      const conf = {
        'indicate': true,
        'indicateColor': '#222',
        'dial1Color': '#666600',
        'dial2Color': '#81812e',
        'dial3Color': '#9d9d5c',
        'timeAdd': 1,
        'time24h': true,
        'dateAdd': 3,
        'dateAddColor': '#999'
      }
      const canvas = this.$element('canvas1')
      const ctx = canvas.getContext('2d')
      drawClock(400, ctx, conf)
    },
    drawCanvas2 () {
      const canvas = this.$element('canvas2')
      const ctx = canvas.getContext('2d')
      drawLogo(ctx)
    },
    drawCanvas3 () {
      const canvas = this.$element('canvas3')
      const ctx = canvas.getContext('2d')
      const img = new Image()
      img.src = 'https://www.quickapp.cn/assets/images/home/logo.png'
      img.onload = function () {
        ctx.drawImage(img, 40, 40, 300, 100)
      }
    },
    drawCanvas4 () {
      const canvas = this.$element('canvas4')
      const ctx = canvas.getContext('2d')
      ctx.drawImage(this.$element('image'),0, 0, 300, 300)
    },
    drawCanvas5 () {
      const canvas = this.$element('canvas5')
      const ctx = canvas.getContext('2d')
      drawGradientLogo(ctx)
      grayFilter(ctx)
    },
    drawCanvas6 () {
      const canvas = this.$element('canvas6')
      const ctx = canvas.getContext('2d')
      drawRectByGloComOperation(ctx, this.globalCompositeOperation)
    },
    // 切换canvas合成类型
    changeGlobalCompositeOperation () {
      const globalCompositeOperationArr = ['source-over', 'source-atop',
        'source-in', 'source-out',
        'destination-over', 'destination-atop',
        'destination-in', 'destination-out',
        'lighter', 'copy', 'xor']

      const index = globalCompositeOperationArr.indexOf(this.globalCompositeOperation)
      if (index < globalCompositeOperationArr.length - 1) {
        this.globalCompositeOperation = globalCompositeOperationArr[index + 1]
      }
      else {
        this.globalCompositeOperation = globalCompositeOperationArr[0]
      }

      this.drawCanvas6()
    },
    drawCanvas7() {
      const canvas = this.$element('canvas7')
      const ctx = canvas.getContext('2d')

      let offset = 0

      // 绘制蚂蚁线
      setInterval(() => {
        offset++

        if (offset > 16) {
          offset = 0
        }

        ctx.clearRect(0, 0, 300, 300)
        // 设置虚线线段和间隙长度 分别为 4px 2px
        ctx.setLineDash([4, 2])
        // 设置虚线的起始偏移量
        ctx.lineDashOffset = -offset
        ctx.strokeRect(10, 10, 200, 200)
      }, 20)
    },
    savePic () {
      this.$element('canvas1').toTempFilePath({
        x: 50,
        y: 50,
        width: 350,
        height: 350,
        destWidth: 200,
        destHeight: 200,
        fileType: 'png',
        quality: 0.5,
        success: (res) => {
          this.imageUrl = res.uri
        },
        fail: (err, code) => {
          prompt.showToast({
            message: `错误原因：${err}, 错误代码：${code}`
          })
        }
      })
    }
  }
</script>

<style>
  @import '../../../common/css/common.css';

  .content {
    flex-direction: column;
    align-items: center;
    width: 100%;
    background-color: #ffffff;
    padding: 30px 0px 10px 0px;
  }

  canvas {
    height: 400px;
    width: 400px;
  }

  #canvas2 {
    height: 300px;
  }

  #canvas3 {
    height: 200px;
  }

  #canvas4 {
    width: 380px;
    height: 380px;
  }

  .glo-type {
    margin: 20px;
  }

  #canvas6 {
    width: 320px;
    height: 320px;
    border: 1px solid red;
  }

  .btn {
    width: 320px;
    margin: 20px;
  }

  .content text {
    margin-top: 20px;
  }
</style>


<style>
  @import '../../../common/css/common.css';

  .content {
    flex-direction: column;
    align-items: center;
    width: 100%;
    background-color: #ffffff;
    padding: 30px 0px 10px 0px;
  }

  canvas {
    height: 400px;
    width: 400px;
  }

  #canvas2 {
    height: 300px;
  }

  #canvas3 {
    height: 200px;
  }

  #canvas4 {
    width: 380px;
    height: 380px;
  }
  #canvas6 {
    width: 380px;
    height: 380px;
  }

  .glo-type {
    margin: 20px;
  }

  #canvas6 {
    width: 320px;
    height: 320px;
    border: 1px solid red;
  }

  #canvas7 {
    width: 302px;
    height: 302px;
  }

  .btn {
    width: 320px;
    margin: 20px;
  }

  .content text {
    margin-top: 20px;
  }
</style>
