<template>
  <div class="doc-page">
    <div class="page-title-wrap">
      <text class="page-title">{{componentName}}</text>
    </div>

    <div class="item-container">
      <div class="item-content" for="{{lifecycleList}}">
        <text class="txt">{{$item}}</text>
        <text class="txt">触发时机: {{lifecycleObject[$item].desc}}</text>
        <text class="txt">触发次数: {{lifecycleObject[$item].count}}</text>
        <text class="txt" if="{{lifecycleObject[$item].params}}">参数: {{lifecycleObject[$item].params}}</text>
      </div>
    </div>
    <div class="item-container">
      <div class="item-content">
        <text class="title">通过$page变量获取页面的元信息</text>
        <text>name: {{pageInfo.name}}</text>
        <text>path: {{pageInfo.path}}</text>
        <text>component: {{pageInfo.component}}</text>
      </div>
    </div>
  </div>
</template>

<script>

  export default {
    private: {
      componentName: 'lifecycle',
      lifecycleObject: {
        onInit: {
          count: 0,
          desc: `当页面完成初始化时调用，只触发一次`
        },
        onReady: {
          count: 0,
          desc: `当页面完成创建可以显示时触发，只触发一次`
        },
        onShow: {
          count: 0,
          desc: `当进入页面时触发`
        },
        onHide: {
          count: 0,
          desc: `当页面跳转离开时触发`
        },
        onDestroy: {
          count: 0,
          desc: `当页面跳转离开（不进入导航栈）时触发`
        },
        onBackPress: {
          count: 0,
          desc: `当用户点击返回按钮时触发。返回true表示页面自己处理返回逻辑，返回false表示使用默认的返回逻辑，不返回值会作为false处理`,
          params: ''
        },
        onMenuPress: {
          count: 0,
          desc: `当用户点击菜单按钮时触发`
        }
      },
      lifecycleList: [],
      pageInfo: {}
    },
    onInit () {
      this.$page.setTitleBar({text: 'Lifecycle'})
      // 初始化lifecycleList
      Object.keys(this.lifecycleObject).forEach(item => {
        this.lifecycleList.push(item)
      })
      console.info(`### onInit ###`)
      ++this.lifecycleObject.onInit.count
      this.pageInfo = this.$page
    },
    onReady () {
      console.info(`### onReady ###`)
      ++this.lifecycleObject.onReady.count
    },
    onShow () {
      console.info(`### onShow ###`)
      ++this.lifecycleObject.onShow.count
    },
    onHide () {
      console.info(`### onHide ###`)
      ++this.lifecycleObject.onHide.count
    },
    onDestroy () {
      console.info(`### onDestroy ###`)
      ++this.lifecycleObject.onDestroy.count
    },
    onBackPress (params) {
      console.info(`### onBackPress ###`)
      ++this.lifecycleObject.onBackPress.count
      this.lifecycleObject.onBackPress.params = JSON.stringify(params)
    },
    onMenuPress () {
      console.info(`### onMenuPress ###`)
      ++this.lifecycleObject.onMenuPress.count
    }
  }
</script>

<style>
  @import '../../common/css/common.css';

  .item-container {
    margin-bottom: 50px;
    margin-right: 60px;
    margin-left: 60px;
    flex-direction: column;
  }

  .item-content {
    flex-direction: column;
    background-color: #ffffff;
    padding: 30px;
    margin-bottom: 30px;
    align-items: flex-start;
  }
</style>
