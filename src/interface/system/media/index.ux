<template>
  <div class="doc-page">
    <div class="page-title-wrap">
      <text class="page-title">{{componentName}}</text>
    </div>

    <div class="item-container">
      <!-- 拍摄/选择图片 -->
      <div class="item-content">
        <text class="txt">拍摄图片的路径: {{pathPhotoSave}}</text>
        <block if="{{isDisplayOneImage}}">
          <text class="txt">选取图片的路径：{{pathPhotoPick}}</text>
          <image src="{{photoUri}}" class="image"></image>
        </block>
        <block else>
          <block for="{{pathFilePickArr}}">
              <text class="txt">选取图片的路径：{{$item}}</text>
              <image src="{{$item}}" class="image"></image>
          </block>
        </block>
        <input type="button" class="btn" onclick="takePhoto" value="拍摄照片"/>
        <input type="button" class="btn" onclick="saveImageToAlbum" value="将拍摄的照片保存到本地"/>
        <input type="button" class="btn" onclick="pickPhoto" value="选取图片"/>
        <input type="button" class="btn" onclick="pickPhotos" value="多选图片"/>
      </div>
      <!-- 拍摄/选择视频 -->
      <div class="item-content">
        <text class="txt">拍摄视频的路径：{{pathVideoSave}}</text>
        <text class="txt">选取视频的路径：{{pathVideoPick}}</text>
        <video src="{{videoUri}}" class="video" autoplay="true"></video>
        <input type="button" class="btn" onclick="takeVideo" value="拍摄视频"/>
        <input type="button" class="btn" onclick="saveVideoToAlbum" value="将拍摄的视频保存到本地"/>
        <input type="button" class="btn" onclick="pickVideo" value="选择视频"/>
      </div>
      <!-- 系统铃声设置 -->
      <div class="item-content">
        <text class="txt">闹钟铃声：{{alarmName}}</text>
        <text class="txt">来电铃声：{{ringtoneName}}</text>
        <text class="txt">通知铃声：{{notificationName}}</text>
        <input type="button" class="btn" onclick="getRingtone('alarm')" value="获取闹钟铃声"/>
        <input type="button" class="btn" onclick="getRingtone('ringtone')" value="获取来电铃声"/>
        <input type="button" class="btn" onclick="getRingtone('notification')" value="获取通知铃声"/>
        <input type="button" class="btn" onclick="setRingtone('alarm')" value="设置闹钟铃声"/>
        <input type="button" class="btn" onclick="setRingtone('ringtone')" value="设置来电铃声"/>
        <input type="button" class="btn" onclick="setRingtone('notification')" value="设置通知铃声"/>
      </div>
      <!-- 选取文件 -->
      <div class="item-content">
        <text class="txt">选取文件的路径：{{pathFilePick}}</text>
        <input type="button" class="btn" onclick="pickFile" value="选取文件"/>
      </div>
      <!-- 预览图片 -->
      <div class="item-content">
        <text class="txt">预览图片</text>
        <input type="button" class="btn" onclick="previewImage" value="预览图片"/>
      </div>
    </div>
  </div>
</template>

<script>
  import prompt from '@system.prompt'
  import media from '@system.media'

  export default {
    private: {
      componentName: 'media',
      pathPhotoSave: '',
      pathPhotoPick: '',
      pathVideoSave: '',
      pathVideoPick: '',
      pathRecordStart: '',
      pathRecordStop: '',
      photoUri: '',
      videoUri: '',
      alarmName: '',
      ringtoneName: '',
      notificationName: '',
      pathFilePick: '', // 选取文件的路径
      isDisplayOneImage: true, // 是否显示一张图片
      pathFilePickArr: [] // 多选图片,选取文件列表图片路径数组
    },
    onInit () {
      this.$page.setTitleBar({text: 'Media'})
    },
    takePhoto () {
      const self = this
      media.takePhoto({
        success: function (ret) {
          self.pathPhotoSave = ret.uri
          self.photoUri = ret.uri
        },
        fail: function (erromsg, errocode) {
          console.info(`### media.takePhoto ### ${errocode}: ${erromsg}`)
          prompt.showToast({
            message: `${errocode}: ${erromsg}`
          })
        }
      })
    },
    pickPhoto () {
      const self = this
      media.pickImage({
        success: function (ret) {
          self.pathPhotoPick = ret.uri
          self.photoUri = ret.uri
          self.isDisplayOneImage = true;
        },
        fail: function (erromsg, errocode) {
          console.info(`### media.pickImage ### ${errocode}: ${erromsg}`)
          prompt.showToast({
            message: `${errocode}: ${erromsg}`
          })
        }
      })
    },
    pickPhotos () {
      // 多选图片
      media.pickImages({
        success: (data) => {
          this.pathFilePickArr = data.uris
          this.isDisplayOneImage = false;
        },
        fail: function (erromsg, errocode) {
          console.info(`### media.pickImages ### ${errocode}: ${erromsg}`)
          prompt.showToast({
            message: `${errocode}: ${erromsg}`
          })
        }
        
      })
    },
    takeVideo () {
      const self = this
      media.takeVideo({
        success: function (ret) {
          self.pathVideoSave = ret.uri
          self.videoUri = ret.uri
        },
        fail: function (erromsg, errocode) {
          console.info(`### media.takeVideo ### ${errocode}: ${erromsg}`)
          prompt.showToast({
            message: `${errocode}: ${erromsg}`
          })
        }
      })
    },
    pickVideo () {
      const self = this
      media.pickVideo({
        success: function (ret) {
          self.pathVideoPick = ret.uri
          self.videoUri = ret.uri
        },
        fail: function (erromsg, errocode) {
          console.info(`### media.pickVideo ### ${errocode}: ${erromsg}`)
          prompt.showToast({
            message: `${errocode}: ${erromsg}`
          })
        }
      })
    },
    pickFile () {
      const self = this
      media.pickFile({
        success: function (ret) {
          self.pathFilePick = ret.uri
        },
        fail: function (erromsg, errocode) {
          console.info(`### media.pickFile ### ${errocode}: ${erromsg}`)
          prompt.showToast({
            message: `${errocode}: ${erromsg}`
          })
        }
      })
    },
    saveImageToAlbum () {
      if (!this.pathPhotoSave) {
        prompt.showToast({
          message: `please take a photo firstly`
        })
        return
      }
      media.saveToPhotosAlbum({
        uri: this.pathPhotoSave,
        success: function () {
          prompt.showToast({
            message: `save success`
          })
        },
        fail: function (erromsg, errocode) {
          prompt.showToast({
            message: `${errocode}: ${erromsg}`
          })
        }
      })
    },
    saveVideoToAlbum () {
      if (!this.pathVideoSave) {
        prompt.showToast({
          message: `please record a video firstly`
        })
        return
      }
      media.saveToPhotosAlbum({
        uri: this.pathVideoSave,
        success: function () {
          prompt.showToast({
            message: `save success`
          })
        },
        fail: function (erromsg, errocode) {
          prompt.showToast({
            message: `${errocode}: ${erromsg}`
          })
        }
      })
    },
    setRingtone (type) {
      const _this = this

      media.pickFile({
        success(data) {
          media.setRingtone({
            uri: data.uri,
            type,
            success() {
              prompt.showToast({
                message: '设置成功'
              })
              type = type + 'Name'
              _this[type] = data.uri.replace(/(.*\/)*([^.]+).*/ig, '$2')
            },
            fail(erromsg) {
              prompt.showToast({
                message: erromsg
              })
            }
          })
        }
      })
    },
    getRingtone (type) {
      const _this = this

      media.getRingtone({
        type,
        success(data) {
          type = type + 'Name'
          _this[type] = data.title
        },
        fail(erromsg) {
          prompt.showToast({
            message: erromsg
          })
        }
      })
    },
    previewImage () {
      media.previewImage({
        current: 'https://via.placeholder.com/300.png/',
        uris: [
        'https://via.placeholder.com/500.png/',
        'https://via.placeholder.com/400.png/',
        'https://via.placeholder.com/300.png/',
        'https://via.placeholder.com/200.png/',
        'https://via.placeholder.com/100.png/'
        ]
      })
    }
  }
</script>

<style>
  @import '../../../common/css/common.css';

  .item-container {
    margin-top: 50px;
    margin-right: 60px;
    margin-left: 60px;
    flex-direction: column;
  }
  .item-content {
    flex-direction: column;
    background-color: #ffffff;
    padding: 30px;
    margin-bottom: 20px;
  }
  .image {
    margin: 50px 0;
    width: 630px;
    height: 300px;
  }
  .video {
    margin: 50px 0;
    width: 630px;
    height: 300px;
  }
</style>
