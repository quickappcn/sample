<template>
  <div class="doc-page">
    <div class="page-title-wrap">
      <text class="page-title">{{componentName}}</text>
    </div>

    <div class="item-container">
      <div class="item-content">
        <text>获取屏幕亮度:</text>
        <text>{{value}}</text>
      </div>
      <input type="button" class="btn" onclick="getValue" value="获取屏幕亮度"/>
    </div>

    <div class="item-container">
      <div class="item-content">
        <text>设置屏幕亮度:</text>
        <text>{{sliderValue}}</text>
        <slider style="width: 100%" min="0" max="255" step="1" value="0" onchange="getSliderValue"></slider>
        <text>亮度设置状态：{{status}} {{sliderValue}}</text>
      </div>
      <input type="button" class="btn" onclick="setValue" value="设置屏幕亮度"/>
    </div>

    <div class="item-container">
      <div class="item-content">
        <text>屏幕亮度模式: {{mode}}</text>
      </div>
      <input type="button" class="btn" onclick="getMode" value="获取屏幕亮度模式"/>
    </div>

    <div class="item-container">
      <div class="item-content">
        <text>模式设置状态： {{setModStatus}}</text>
      </div>
      <input type="button" class="btn" onclick="setMode(0)" value="设置为手动调节亮度(0)"/>
      <input type="button" class="btn" onclick="setMode(1)" value="设置为自动调节屏幕亮度(1)"/>
    </div>
  </div>
</template>

<script>
  import brightness from '@system.brightness'

  export default {
    private: {
      componentName: 'Brightness',
      value: 0,
      sliderValue: 0,
      status: '',
      mode: '',
      setModStatus: ''
    },
    onInit () {
      this.$page.setTitleBar({text: '屏幕亮度'})
    },
    getValue () {
      const self = this
      brightness.getValue({
        success: function (ret) {
          self.value = ret.value
        },
        fail: function (error) {
          self.value = error
        }
      })
    },
    getSliderValue (e) {
      this.sliderValue = e.progress
    },
    setValue () {
      const self = this
      brightness.setValue({
        value: self.sliderValue,
        success: function () {
          self.status = '亮度设置成功'
        },
        fail: function (err) {
          self.status = '设置失败： ' + err
        }
      })
    },
    getMode () {
      const self = this
      brightness.getMode({
        success: function (ret) {
          self.mode = ret.mode
        }
      })
    },
    setMode (index) {
      const self = this
      brightness.setMode({
        mode: index,
        success: function(){

          self.setModStatus = 'mode=' + index
        },
        fail: function(err, code){
          self.setModStatus = 'handling fail, code=' + code
        }
      })
    }
  }
</script>

<style>
  @import '../../../common/css/common.css';

  .item-container {
    margin-bottom: 50px;
    margin-right: 60px;
    margin-left: 60px;
    flex-direction: column;
  }

  .item-content {
    flex-direction: column;
    background-color: #ffffff;
    padding: 30px;
    margin-bottom: 50px;
    align-items: flex-start;
  }
</style>
