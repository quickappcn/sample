<template>
  <stack class="doc-page">
    <div class="main">
      <div class="page-title-wrap">
        <text class="page-title">{{componentName}}</text>
      </div>

      <div class="item-container">
        <div class="item-content">
          <text class="txt">获取图片信息:</text>
          <image src="{{imageGetInfo.uri || ''}}"></image>
          <text class="txt">uri: {{imageGetInfo.uri || ''}}</text>
          <text class="txt">width: {{imageGetInfo.width || ''}}</text>
          <text class="txt">height: {{imageGetInfo.height || ''}}</text>
          <text class="txt">size: {{imageGetInfo.size || ''}}</text>
        </div>
        <input type="button" class="btn" onclick="getImageInfo" value="获取图片信息" />
      </div>

      <div class="item-container">
        <div class="item-content">
          <text class="txt">设置图片的exif信息:</text>
          <image src="{{exifimageUri}}"></image>
        </div>
        <input type="button" class="btn" onclick="setImageExif" value="设置图片的exif信息" />
      </div>

      <div class="item-container">
        <div class="item-content">
          <text class="txt">获取图片的exif信息:</text>
          <image src="{{exifimageUri}}"></image>
          <text class="txt">attributes: {{attributes}}</text>
        </div>
        <input type="button" class="btn" onclick="getImageExif" value="获取图片的exif信息" />
      </div>

      <div class="item-container">
        <div class="item-content">
          <text class="txt">压缩图片:</text>
          <image src="{{imageCompressInfo.uri || ''}}"></image>
          <text class="txt">uri: {{imageCompressInfo.uri || ''}}</text>
        </div>
        <input type="button" class="btn" onclick="compressImage" value="压缩图片" />
      </div>

      <div class="item-container">
        <div class="item-content">
          <text class="txt">按操作顺序编辑图片:</text>
          <image src="{{imageOperateInfo.uri || ''}}"></image>
          <text class="txt">uri: {{imageOperateInfo.uri || ''}}</text>
        </div>
        <input type="button" class="btn" onclick="operateImage" value="按操作顺序编辑图片" />
      </div>

      <div class="item-container">
        <div class="item-content">
          <text class="txt">编辑图片:</text>
          <div class="input-item">
            <text class="txtH2">裁剪比列:</text>
            <text class="input-hint mgl12">aspectRatioX:</text>
            <input class="input-text" type="text" value="{{aspectRatioX}}" @change="changeValueX"></input>
          </div>
          <div class="input-item">
            <text class="input-hint mgl40">aspectRatioY:</text>
            <input class="input-text" type="text" value="{{aspectRatioY}}" @change="changeValueY"></input>
          </div>
          <image src="{{imageEditInfo.uri || ''}}"></image>
          <text class="txt">uri: {{imageEditInfo.uri || ''}}</text>
        </div>
        <input type="button" class="btn" onclick="editImage" value="编辑图片" />
      </div>
    </div>

    <!-- mask -->
    <div if="showMask" class="mask" onclick="showToast">
      <text class="font-m">{{hint}}</text>
      <text class="font-m color-white" onclick="preTask">点击刷新页面</text>
    </div>
  </stack>
</template>

<script>
  import image from '@system.image'
  import request from '@system.request'
  import prompt from '@system.prompt'

  export default {
    private: {
      componentName: 'image',
      imageUri: '',
      showMask: true,
      hint: 'Loading...',
      imageGetInfo: {},
      imageCompressInfo: {},
      imageOperateInfo: {},
      imageEditInfo: {},
      exifimageUri: '/interface/system/image/img/pic-160x160.jpg',
      attributes: '',
      aspectRatioX: 16,
      aspectRatioY: 9,
    },
    onInit() {
      this.$page.setTitleBar({
        text: 'Image'
      })
      this.preTask()
    },
    preTask() {
      // 下载图片
      const self = this
      request.download({
        url: 'https://ss0.baidu.com/6ONWsjip0QIZ8tyhnq/it/u=2247692397,1189743173&fm=5',
        success: function (data) {
          // 监听下载任务
          request.onDownloadComplete({
            token: data.token,
            success: function (ret) {
              self.imageUri = ret.uri
              self.showMask = false
            },
            fail: function (erromsg, errocode) {
              self.hint = `${errocode}: ${erromsg}`
              console.info(`### request.onDownloadComplete ### ${errocode}: ${erromsg}`)
              prompt.showToast({
                message: `${errocode}: ${erromsg}`
              })
            }
          })
        }
      })
    },
    showToast() {
      prompt.showToast({
        message: `${this.hint}`
      })
    },
    getImageInfo() {
      // 获取图片信息
      const self = this
      image.getImageInfo({
        uri: self.imageUri,
        success: function (data) {
          self.imageGetInfo = data
        },
        fail: function (erromsg, errocode) {
          console.info(`### image.getInfo ### ${errocode}: ${erromsg}`)
          prompt.showToast({
            message: `${errocode}: ${erromsg}`
          })
        },
        complete: function () {
          prompt.showToast({
            message: `complete`
          })
        }
      })
    },
    setImageExif() {
      // 设置图片的exif信息
      image.setExifAttributes({
        uri: this.exifimageUri,
        attributes: {
          Orientation: '1',
          Make: 'quick app'
        },
        success: function (data) {
          prompt.showToast({
            message: `handling success`
          })
        },
        fail: function (data, code) {
          prompt.showToast({
            message: `handling fail, code = ${code}`
          })
        }
      })
    },
    getImageExif() {
      // 获取图片的exif信息
      image.getExifAttributes({
        uri: this.exifimageUri,
        success: (data) => {
          this.attributes = JSON.stringify(data.attributes)
          prompt.showToast({
            message: `handling success`
          })
        },
        fail: function (data, code) {
          prompt.showToast({
            message: `handling fail, code = ${code}`
          })
        }
      })
    },
    compressImage() {
      // 压缩图片
      const self = this
      image.compressImage({
        uri: self.imageUri,
        quality: 50,
        ratio: 5,
        format: 'WEBP',
        success: function (data) {
          self.imageCompressInfo = data
        },
        fail: function (erromsg, errocode) {
          console.info(`### image.compress ### ${errocode}: ${erromsg}`)
          prompt.showToast({
            message: `${errocode}: ${erromsg}`
          })
        },
        complete: function () {
          prompt.showToast({
            message: `complete`
          })
        }
      })
    },
    operateImage() {
      // 按操作顺序编辑图片
      const self = this
      image.applyOperations({
        uri: self.imageUri,
        operations: [{
            action: 'crop',
            x: 30,
            y: 50,
            width: 50,
            height: 50
          },
          {
            action: 'scale',
            scaleX: 2,
            scaleY: 2
          },
          {
            action: 'rotate',
            degree: 180
          }
        ],
        quality: 50,
        format: 'WEBP',
        success: function (data) {
          self.imageOperateInfo = data
        },
        fail: function (erromsg, errocode) {
          console.info(`### image.applyOperations ### ${errocode}: ${erromsg}`)
          prompt.showToast({
            message: `${errocode}: ${erromsg}`
          })
        },
        complete: function () {
          prompt.showToast({
            message: `complete`
          })
        }
      })
    },
    changeValueX(e) {
      this.aspectRatioX = e.value
    },
    changeValueY(e) {
      this.aspectRatioY = e.value
    },
    editImage() {
      // 编辑图片
      const self = this
      image.editImage({
        uri: self.imageUri,
        aspectRatioX: self.aspectRatioX,
        aspectRatioY: self.aspectRatioY,
        success: function (data) {
          self.imageEditInfo = data
        },
        fail: function (erromsg, errocode) {
          console.info(`### image.edit ### ${errocode}: ${erromsg}`)
          prompt.showToast({
            message: `${errocode}: ${erromsg}`
          })
        },
        complete: function () {
          prompt.showToast({
            message: `complete`
          })
        }
      })
    }
  }
</script>

<style>
  @import '../../../common/css/common.css';

  .main {
    flex-direction: column;
  }

  .mask {
    flex: 1;
    flex-direction: column;
    align-content: center;
    padding-top: 400px;
    background-color: rgba(0, 0, 0, 0.5);
  }

  .color-white {
    color: #FFFFFF;
  }

  .font-m {
    margin-bottom: 100px;
    text-align: center;
    font-size: 40px;
  }

  .item-container {
    margin-bottom: 50px;
    margin-right: 60px;
    margin-left: 60px;
    flex-direction: column;
  }

  .item-content {
    flex-direction: column;
    background-color: #ffffff;
    padding: 30px;
    margin-bottom: 100px;
    align-items: flex-start;
  }

  .input-item {
    flex-direction: row;
  }

  .input-hint {
    margin-right: 30px;
  }

  .input-text {
    height: 55px;
    line-height: 55px;
    text-align: center;
    font-size: 30px;
    margin-top: 10px;
  }

  .mgl12 {
    margin-left: 12px;
  }

  .mgl40 {
    margin-left: 140px;
  }
</style>